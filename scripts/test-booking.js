require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL || '',
  process.env.SUPABASE_SERVICE_ROLE_KEY || ''
);

async function testBooking() {
  try {
    console.log('üß™ Testujem vytvorenie rezerv√°cie...');
    
    // 1. Z√≠ska≈• dostupn√Ω term√≠n
    const { data: sessions, error: sessionsError } = await supabase
      .from('tasting_sessions')
      .select('id, start_time, status, max_capacity, current_bookings')
      .eq('status', 'available')
      .limit(1);
    
    if (sessionsError || !sessions || sessions.length === 0) {
      console.error('‚ùå ≈Ωiadne dostupn√© term√≠ny:', sessionsError);
      return;
    }
    
    const session = sessions[0];
    console.log('‚úÖ Term√≠n n√°jden√Ω:', session);
    
    // 2. Z√≠ska≈• degust√°ciu
    const { data: packages, error: packagesError } = await supabase
      .from('tasting_packages')
      .select('*')
      .eq('active', true)
      .limit(1);
    
    if (packagesError || !packages || packages.length === 0) {
      console.error('‚ùå ≈Ωiadne degust√°cie:', packagesError);
      return;
    }
    
    const package_ = packages[0];
    console.log('‚úÖ Degust√°cia n√°jden√°:', package_);
    
    // 3. Vytvori≈• test rezerv√°ciu
    const testFormData = {
      customer_name: 'Test User',
      customer_email: 'test@example.com',
      customer_phone: '+421123456789',
      number_of_people: 1,
      special_requests: 'Test request'
    };
    
    console.log('üìù Test form data:', testFormData);
    
    // 4. Vypoƒç√≠ta≈• cenu
    const totalPrice = package_.price * testFormData.number_of_people;
    console.log('üí∞ Celkov√° cena:', totalPrice);
    
    // 5. Vlo≈æi≈• rezerv√°ciu
    const { data: booking, error: bookingError } = await supabase
      .from('tasting_bookings')
      .insert({
        session_id: session.id,
        customer_name: testFormData.customer_name,
        customer_email: testFormData.customer_email,
        customer_phone: testFormData.customer_phone,
        number_of_people: testFormData.number_of_people,
        special_requests: testFormData.special_requests,
        total_price: totalPrice,
        status: 'pending'
      })
      .select()
      .single();
    
    if (bookingError) {
      console.error('‚ùå Chyba pri vytv√°ran√≠ rezerv√°cie:', bookingError);
      return;
    }
    
    console.log('‚úÖ Rezerv√°cia vytvoren√°:', booking);
    
    // 6. Vymaza≈• test rezerv√°ciu
    const { error: deleteError } = await supabase
      .from('tasting_bookings')
      .delete()
      .eq('id', booking.id);
    
    if (deleteError) {
      console.log('‚ö†Ô∏è  Nepodarilo sa vymaza≈• test rezerv√°ciu:', deleteError);
    } else {
      console.log('üóëÔ∏è  Test rezerv√°cia vymazan√°');
    }
    
    console.log('üéâ Test √∫spe≈°n√Ω! V≈°etko funguje spr√°vne.');
    
  } catch (error) {
    console.error('‚ùå Neoƒçak√°van√° chyba:', error);
  }
}

testBooking();
