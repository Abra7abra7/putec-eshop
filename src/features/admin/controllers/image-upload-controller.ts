'use server';

import { createClient } from '@supabase/supabase-js';
import type { SupabaseImageUpload } from '../types';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

export async function uploadWineImage(
  file: File,
  wineName: string
): Promise<{ success: boolean; data?: SupabaseImageUpload; error?: string }> {
  try {
    console.log('üñºÔ∏è Uploadujem obr√°zok pre v√≠no:', wineName);
    
    // Valid√°cia s√∫boru
    if (!file) {
      return { success: false, error: '≈Ωiadny s√∫bor na upload' };
    }
    
    // Kontrola veƒækosti (max 5MB)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      return { success: false, error: 'S√∫bor je pr√≠li≈° veƒæk√Ω. Maxim√°lna veƒækos≈• je 5MB.' };
    }
    
    // Kontrola typu s√∫boru
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      return { success: false, error: 'Nepodporovan√Ω typ s√∫boru. Povolen√© s√∫: JPEG, PNG, WebP.' };
    }
    
    // Generovanie unik√°tneho n√°zvu s√∫boru
    const timestamp = Date.now();
    const sanitizedName = wineName
      .toLowerCase()
      .replace(/[^a-z0-9]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
    
    const fileExtension = file.name.split('.').pop();
    const fileName = `${sanitizedName}-${timestamp}.${fileExtension}`;
    const filePath = `wines/${fileName}`;
    
    console.log('üìÅ Uploadujem s√∫bor:', filePath);
    
    // Upload do Supabase Storage
    const { data, error } = await supabase.storage
      .from('wine-images')
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: false
      });
    
    if (error) {
      console.error('‚ùå Chyba pri uploadu:', error);
      return { success: false, error: `Upload zlyhal: ${error.message}` };
    }
    
    // Z√≠ska≈• public URL
    const { data: urlData } = supabase.storage
      .from('wine-images')
      .getPublicUrl(filePath);
    
    if (!urlData.publicUrl) {
      return { success: false, error: 'Nepodarilo sa z√≠ska≈• public URL' };
    }
    
    const uploadResult: SupabaseImageUpload = {
      path: filePath,
      url: urlData.publicUrl,
      size: file.size,
      mimeType: file.type
    };
    
    console.log('‚úÖ Obr√°zok √∫spe≈°ne uploadovan√Ω:', uploadResult.url);
    
    return { 
      success: true, 
      data: uploadResult 
    };
    
  } catch (error) {
    console.error('‚ùå Neoƒçak√°van√° chyba pri uploadu:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Neoƒçak√°van√° chyba pri uploadu' 
    };
  }
}

export async function deleteWineImage(imagePath: string): Promise<{ success: boolean; error?: string }> {
  try {
    console.log('üóëÔ∏è Ma≈æem obr√°zok:', imagePath);
    
    const { error } = await supabase.storage
      .from('wine-images')
      .remove([imagePath]);
    
    if (error) {
      console.error('‚ùå Chyba pri mazan√≠ obr√°zka:', error);
      return { success: false, error: `Mazanie zlyhalo: ${error.message}` };
    }
    
    console.log('‚úÖ Obr√°zok √∫spe≈°ne vymazan√Ω:', imagePath);
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Neoƒçak√°van√° chyba pri mazan√≠:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Neoƒçak√°van√° chyba pri mazan√≠' 
    };
  }
}

export async function getWineImageUrl(imagePath: string): Promise<string | null> {
  try {
    const { data } = supabase.storage
      .from('wine-images')
      .getPublicUrl(imagePath);
    
    return data.publicUrl || null;
  } catch (error) {
    console.error('‚ùå Chyba pri z√≠skavan√≠ URL:', error);
    return null;
  }
}
