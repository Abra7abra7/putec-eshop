'use server';

import { createSupabaseServerClient } from '@/libs/supabase/supabase-server-client';
import type { BookingFormData } from '../types';

export async function createTastingBooking(
  sessionId: number,
  formData: BookingFormData
) {
  try {
    console.log('üç∑ Vytv√°ram rezerv√°ciu pre session:', sessionId);
    console.log('üìù Form data:', formData);
    
    const supabase = await createSupabaseServerClient();
    
    // Overi≈•, ƒçi je term√≠n st√°le dostupn√Ω
    const { data: session, error: sessionError } = await supabase
      .from('tasting_sessions')
      .select('*, package:tasting_packages(*)')
      .eq('id', sessionId)
      .single();
    
    if (sessionError || !session) {
      console.error('‚ùå Session error:', sessionError);
      return { success: false, error: 'Term√≠n nebol n√°jden√Ω' };
    }
    
    console.log('‚úÖ Session n√°jden√Ω:', session);
    
    if (session.status === 'fully_booked') {
      return { success: false, error: 'Term√≠n je u≈æ plne obsaden√Ω' };
    }
    
    if (session.current_bookings + formData.number_of_people > session.max_capacity) {
      return { success: false, error: 'Nedostatok miest pre po≈æadovan√Ω poƒçet os√¥b' };
    }
    
    // Vypoƒç√≠ta≈• celkov√∫ cenu
    const totalPrice = (session.package?.price || 0) * formData.number_of_people;
    console.log('üí∞ Celkov√° cena:', totalPrice);
    
    // Vytvori≈• rezerv√°ciu
    const bookingData = {
      session_id: sessionId,
      customer_name: formData.customer_name,
      customer_email: formData.customer_email,
      customer_phone: formData.customer_phone,
      number_of_people: formData.number_of_people,
      special_requests: formData.special_requests,
      total_price: totalPrice,
      status: 'pending'
    };
    
    console.log('üìù Vklad√°m booking data:', bookingData);
    
    const { data: booking, error: bookingError } = await supabase
      .from('tasting_bookings')
      .insert(bookingData)
      .select()
      .single();
    
    if (bookingError) {
      console.error('‚ùå Error creating booking:', bookingError);
      return { success: false, error: 'Nepodarilo sa vytvori≈• rezerv√°ciu' };
    }
    
    console.log('‚úÖ Booking vytvoren√Ω:', booking);
    
    return { 
      success: true, 
      bookingId: booking.id,
      totalPrice,
      message: 'Rezerv√°cia bola √∫spe≈°ne vytvoren√°'
    };
    
  } catch (error) {
    console.error('‚ùå Unexpected error:', error);
    return { success: false, error: 'Neoƒçak√°van√° chyba pri vytv√°ran√≠ rezerv√°cie' };
  }
}
